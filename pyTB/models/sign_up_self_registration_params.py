# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SignUpSelfRegistrationParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'captcha_site_key': 'str',
        'sign_up_text_message': 'str'
    }

    attribute_map = {
        'captcha_site_key': 'captchaSiteKey',
        'sign_up_text_message': 'signUpTextMessage'
    }

    def __init__(self, captcha_site_key=None, sign_up_text_message=None):  # noqa: E501
        """SignUpSelfRegistrationParams - a model defined in Swagger"""  # noqa: E501
        self._captcha_site_key = None
        self._sign_up_text_message = None
        self.discriminator = None
        if captcha_site_key is not None:
            self.captcha_site_key = captcha_site_key
        if sign_up_text_message is not None:
            self.sign_up_text_message = sign_up_text_message

    @property
    def captcha_site_key(self):
        """Gets the captcha_site_key of this SignUpSelfRegistrationParams.  # noqa: E501


        :return: The captcha_site_key of this SignUpSelfRegistrationParams.  # noqa: E501
        :rtype: str
        """
        return self._captcha_site_key

    @captcha_site_key.setter
    def captcha_site_key(self, captcha_site_key):
        """Sets the captcha_site_key of this SignUpSelfRegistrationParams.


        :param captcha_site_key: The captcha_site_key of this SignUpSelfRegistrationParams.  # noqa: E501
        :type: str
        """

        self._captcha_site_key = captcha_site_key

    @property
    def sign_up_text_message(self):
        """Gets the sign_up_text_message of this SignUpSelfRegistrationParams.  # noqa: E501


        :return: The sign_up_text_message of this SignUpSelfRegistrationParams.  # noqa: E501
        :rtype: str
        """
        return self._sign_up_text_message

    @sign_up_text_message.setter
    def sign_up_text_message(self, sign_up_text_message):
        """Sets the sign_up_text_message of this SignUpSelfRegistrationParams.


        :param sign_up_text_message: The sign_up_text_message of this SignUpSelfRegistrationParams.  # noqa: E501
        :type: str
        """

        self._sign_up_text_message = sign_up_text_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpSelfRegistrationParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpSelfRegistrationParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
