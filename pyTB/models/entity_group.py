# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EntityGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_info': 'str',
        'configuration': 'str',
        'created_time': 'int',
        'group_all': 'bool',
        'id': 'EntityGroupId',
        'name': 'str',
        'owner_id': 'EntityId',
        'type': 'str'
    }

    attribute_map = {
        'additional_info': 'additionalInfo',
        'configuration': 'configuration',
        'created_time': 'createdTime',
        'group_all': 'groupAll',
        'id': 'id',
        'name': 'name',
        'owner_id': 'ownerId',
        'type': 'type'
    }

    def __init__(self, additional_info=None, configuration=None, created_time=None, group_all=None, id=None, name=None, owner_id=None, type=None):  # noqa: E501
        """EntityGroup - a model defined in Swagger"""  # noqa: E501
        self._additional_info = None
        self._configuration = None
        self._created_time = None
        self._group_all = None
        self._id = None
        self._name = None
        self._owner_id = None
        self._type = None
        self.discriminator = None
        if additional_info is not None:
            self.additional_info = additional_info
        if configuration is not None:
            self.configuration = configuration
        if created_time is not None:
            self.created_time = created_time
        if group_all is not None:
            self.group_all = group_all
        if id is not None:
            self.id = id
        self.name = name
        if owner_id is not None:
            self.owner_id = owner_id
        self.type = type

    @property
    def additional_info(self):
        """Gets the additional_info of this EntityGroup.  # noqa: E501


        :return: The additional_info of this EntityGroup.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this EntityGroup.


        :param additional_info: The additional_info of this EntityGroup.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def configuration(self):
        """Gets the configuration of this EntityGroup.  # noqa: E501


        :return: The configuration of this EntityGroup.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this EntityGroup.


        :param configuration: The configuration of this EntityGroup.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def created_time(self):
        """Gets the created_time of this EntityGroup.  # noqa: E501


        :return: The created_time of this EntityGroup.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this EntityGroup.


        :param created_time: The created_time of this EntityGroup.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def group_all(self):
        """Gets the group_all of this EntityGroup.  # noqa: E501


        :return: The group_all of this EntityGroup.  # noqa: E501
        :rtype: bool
        """
        return self._group_all

    @group_all.setter
    def group_all(self, group_all):
        """Sets the group_all of this EntityGroup.


        :param group_all: The group_all of this EntityGroup.  # noqa: E501
        :type: bool
        """

        self._group_all = group_all

    @property
    def id(self):
        """Gets the id of this EntityGroup.  # noqa: E501


        :return: The id of this EntityGroup.  # noqa: E501
        :rtype: EntityGroupId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityGroup.


        :param id: The id of this EntityGroup.  # noqa: E501
        :type: EntityGroupId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EntityGroup.  # noqa: E501


        :return: The name of this EntityGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityGroup.


        :param name: The name of this EntityGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this EntityGroup.  # noqa: E501


        :return: The owner_id of this EntityGroup.  # noqa: E501
        :rtype: EntityId
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this EntityGroup.


        :param owner_id: The owner_id of this EntityGroup.  # noqa: E501
        :type: EntityId
        """

        self._owner_id = owner_id

    @property
    def type(self):
        """Gets the type of this EntityGroup.  # noqa: E501


        :return: The type of this EntityGroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityGroup.


        :param type: The type of this EntityGroup.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CUSTOMER", "ASSET", "DEVICE", "USER", "ENTITY_VIEW", "DASHBOARD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
